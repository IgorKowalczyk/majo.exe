datasource db {
 provider  = "mongodb"
 url       = env("DATABASE_URL")
}

generator client {
 provider        = "prisma-client-js"
 previewFeatures = ["driverAdapters"]
}

// User model
model User {
  ID              String    @id @map("_id") @default(auto()) @db.ObjectId 
  discordId       String    @unique @map(name: "discord_id")
  name            String
  global_name     String    @map(name: "global_name")
  discriminator   String
  avatar          String?
  public_flags    Int?      
  flags           Int?
  locale          String?
  nitro           Int?
  email           String?
  emailVerified   DateTime? @map(name: "email_verified")
  lastLogin       DateTime? @map(name: "last_login")
  accounts        Account[]
  sessions        Session[]
  guildLogs       GuildLogs[]
  guildXp         GuildXp[]
  reputation      Reputation[]
  guildWarns      GuildWarns[]

  @@map(name: "users")
}

// User accounts
model Account {
  ID                  String    @id @map("_id") @default(auto()) @db.ObjectId   
  userId              String    @map("user_id")
  type                String
  provider            String
  providerAccountId   String    @map("provider_account_id")
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  user                User      @relation(fields: [userId], references: [discordId])

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// User sessions in dashboard
model Session {
  ID            String    @id @map("_id") @default(auto()) @db.ObjectId 
  sessionToken  String    @unique @map("session_token")
  userId        String    @map("user_id")
  expires       DateTime
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  user          User      @relation(fields: [userId], references: [discordId])

  @@map(name: "sessions")
}

// Verification tokens (not used)
model VerificationToken {
  ID          String    @id @map("_id") @default(auto()) @db.ObjectId    
  identifier  String
  token       String    @unique
  expires     DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

// Bot suggestions submitted by users
model Suggestions {
  ID         String    @id @map("_id") @default(auto()) @db.ObjectId   
  userId     String
  guildId    String?
  message    String
  createdAt  DateTime  @default(now()) @map(name: "created_at")

  @@map(name: "suggestions")
}

// Categories for slash commands
model CommandCategories {
  ID                      String           @id @map("_id") @default(auto()) @db.ObjectId        
  name                    String           @unique
  commands                Commands[]
  guildDisabledCategories GuildDisabledCategories[]
}

// Slash commands
model Commands {
  ID                    String               @id @map("_id") @default(auto()) @db.ObjectId              
  name                  String               @unique
  description           String
  options               Json[]               @default([])
  categoryName          String               @map(name: "category_name")
  category              CommandCategories    @relation(fields: [categoryName], references: [name])
  guildDisabledCommands GuildDisabledCommands[]

  @@map(name: "commands")
}

// Discord guilds
model Guild {
  ID                    String    @id @map("_id") @default(auto()) @db.ObjectId    
  guildId               String    @unique @map(name: "guild_id")
  lastUpdated           DateTime  @default(now()) @map(name: "last_updated")
  createdAt             DateTime  @default(now()) @map(name: "created_at")

  // XP Module
  enableXP                          Boolean  @default(true) @map(name: "enable_xp")
  enableXPLastChanged               DateTime @default(now()) @map(name: "enable_xp_last_changed")
  enableXPLevelUpMessage            Boolean  @default(true) @map(name: "sent_level_messages")
  enableXPLevelUpMessageLastChanged DateTime @default(now()) @map(name: "sent_level_messages_last_changed")

  // Guild customizations
  embedColor String  @default("#5865F2") @map(name: "embed_color")
  publicPage Boolean @default(false) @map(name: "public_page")
  vanity     String?

  // Relations
  guildLogs               GuildLogs[]
  guildXp                 GuildXp[]
  guildJoin               GuildJoin[]
  guildLeave              GuildLeave[]
  reputation              Reputation[]
  giveaway                Giveaways[]
  guildMessage            GuildMessage[]
  guildDisabledCommands   GuildDisabledCommands[]
  guildDisabledCategories GuildDisabledCategories[]
  autoMod                 AutoMod[]
  guildWarns              GuildWarns[]
  guildWelcomeMessage     GuildWelcomeMessage?
  guildLeaveMessage       GuildLeaveMessage?

  @@map(name: "guilds")
}

// Guild disabled slash commands
model GuildDisabledCommands {
  ID           String    @id @map("_id") @default(auto()) @db.ObjectId     
  guildId      String
  commandName  String    @map(name: "command_id")
  command      Commands  @relation(fields: [commandName], references: [name])
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  guild        Guild     @relation(fields: [guildId], references: [guildId])

  @@map(name: "guild_disabled_commands")
}

// Guild disabled slash commands categories 
model GuildDisabledCategories {
  ID           String               @id @map("_id") @default(auto()) @db.ObjectId             
  guildId      String               @map(name: "guild_id")
  categoryName String               @map(name: "category_name")
  category     CommandCategories    @relation(fields: [categoryName], references: [name])
  createdAt    DateTime             @default(now()) @map(name: "created_at")
  guild        Guild                @relation(fields: [guildId], references: [guildId])

  @@map(name: "guild_disabled_categories")
}

// Guild security/audit logs
model GuildLogs {
  ID         String    @id @map("_id") @default(auto()) @db.ObjectId  
  guildId    String    @map(name: "guild_id")
  authorId   String    @map(name: "author_id")
  content    String
  type       String
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  guild      Guild     @relation(fields: [guildId], references: [guildId])
  user       User      @relation(fields: [authorId], references: [discordId])

  @@map(name: "guild_logs")
}

// Guild members xp
model GuildXp {
  ID         String    @id @map("_id") @default(auto()) @db.ObjectId  
  guildId    String    @map(name: "guild_id")
  userId     String    @map(name: "user_id")
  xp         Int       @default(0)
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  guild      Guild     @relation(fields: [guildId], references: [guildId])
  user       User      @relation(fields: [userId], references: [discordId])

  @@map(name: "guild_xp")
}

// Guild members reputation
model Reputation {
  ID          String    @id @map("_id") @default(auto()) @db.ObjectId   
  guildId     String    @map(name: "guild_id")
  userId      String    @map(name: "user_id")
  reputation  Int       @default(0)
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  guild       Guild     @relation(fields: [guildId], references: [guildId])
  user        User      @relation(fields: [userId], references: [discordId])

  @@map(name: "reputation")
}

// Guild members joined
model GuildJoin {
  ID        String    @id @map("_id") @default(auto()) @db.ObjectId 
  guildId   String    @map(name: "guild_id")
  date      DateTime  @default(now())
  joins     Int       @default(0)
  guild     Guild     @relation(fields: [guildId], references: [guildId])

  @@map(name: "guild_joins")
}

// Guild members leaves count
model GuildLeave {
  ID        String    @id @map("_id") @default(auto()) @db.ObjectId   
  guildId   String    @map(name: "guild_id")
  date      DateTime  @default(now())
  leaves    Int       @default(0)
  guild     Guild     @relation(fields: [guildId], references: [guildId])

  @@map(name: "guild_leaves")
}

// Guild messages count
model GuildMessage {
  ID         String    @id @map("_id") @default(auto()) @db.ObjectId  
  guildId    String    @map(name: "guild_id")
  date       DateTime  @default(now())
  messages   Int       @default(0)
  guild      Guild     @relation(fields: [guildId], references: [guildId])
}

// Guild giveaways
model Giveaways {
  ID         String    @id @map("_id") @default(auto()) @db.ObjectId  
  guildId    String    @map(name: "guild_id")
  messageId  String    @unique @map(name: "message_id")
  data       Json
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  guild      Guild     @relation(fields: [guildId], references: [guildId])
}

// Guild automod rules
model AutoMod {
  ID         String    @id @map("_id") @default(auto()) @db.ObjectId
  guildId    String    @map(name: "guild_id")
  ruleId     String    @unique @map(name: "rule_id")
  ruleType   String    @map(name: "rule_type")
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  guild      Guild     @relation(fields: [guildId], references: [guildId])

  @@map(name: "auto_mod")
}

model GuildWarns {
  ID           String    @id @map("_id") @default(auto()) @db.ObjectId    
  warnId       Int       @map(name: "warn_id")
  guildId      String    @map(name: "guild_id")
  userId       String    @map(name: "user_id")
  createdById  String    @default("0") @map(name: "created_by_id")
  message      String
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  guild        Guild     @relation(fields: [guildId], references: [guildId])
  user         User      @relation(fields: [userId], references: [discordId])

  @@map(name: "guild_warns")
}

// Guild welcome message
model GuildWelcomeMessage {  
  ID            String    @id @map("_id") @default(auto()) @db.ObjectId
  guildId       String    @unique @map(name: "guild_id")
  channelId     String    @map(name: "channel_id")
  title         String    @default("🎉 Welcome to the server {user}!")
  description   String    @default("> Welcome to **{guild}** We hope you enjoy your stay here!")
  embedColor    String    @default("#2C2F33") @map(name: "embed_color")
  enabled       Boolean   @default(false)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  guild         Guild     @relation(fields: [guildId], references: [guildId])

  @@map(name: "guild_welcome_message")
}

// Guild leave message
model GuildLeaveMessage {
  ID            String    @id @map("_id") @default(auto()) @db.ObjectId    
  guildId       String    @unique @map(name: "guild_id")
  channelId     String    @map(name: "channel_id")
  title         String    @default("👋 Goodbye {user}!")
  description   String    @default("> We're sorry to see you go!")
  embedColor    String    @default("#2C2F33") @map(name: "embed_color")
  enabled       Boolean   @default(false)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  guild         Guild     @relation(fields: [guildId], references: [guildId])

  @@map(name: "guild_leave_message")
}
