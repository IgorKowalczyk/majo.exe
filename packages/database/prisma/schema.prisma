datasource db {
 provider  = "postgresql"
 url       = env("DATABASE_URL")
 directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
 provider        = "prisma-client-js"
 previewFeatures = ["driverAdapters"]
}

// User model
model User {
 id            String       @id @default(cuid())
 discordId     String       @unique @map(name: "discord_id")
 name          String
 global_name   String       @map(name: "global_name")
 discriminator String
 avatar        String?
 public_flags  BigInt?      @map(name: "public_flags")
 flags         BigInt?
 locale        String?
 nitro         Int?
 email         String?
 emailVerified DateTime?    @map(name: "email_verified")
 lastLogin     DateTime?    @map(name: "last_login")
 accounts      Account[]
 sessions      Session[]
 guildLogs     GuildLogs[]
 guildXp       GuildXp[]
 reputation    Reputation[]
 guildWarns    GuildWarns[]

 @@map(name: "users")
}

// User accounts
model Account {
 id                String  @id @default(cuid())
 userId            String  @map("user_id")
 type              String
 provider          String
 providerAccountId String  @map("provider_account_id")
 refresh_token     String? @db.Text
 access_token      String? @db.Text
 expires_at        Int?
 token_type        String?
 scope             String?
 id_token          String? @db.Text
 session_state     String?
 user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@unique([provider, providerAccountId])
 @@map("accounts")
}

// User sessions in dashboard
model Session {
 id           String   @id @default(cuid())
 sessionToken String   @unique @map("session_token")
 userId       String   @map("user_id")
 expires      DateTime
 createdAt    DateTime @default(now()) @map(name: "created_at")
 user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@map(name: "sessions")
}

// Verification tokens (not used)
model VerificationToken {
 identifier String
 token      String   @unique
 expires    DateTime

 @@unique([identifier, token])
 @@map(name: "verification_tokens")
}

// Bot suggestions submitted by users
model Suggestions {
 id        String   @id @default(cuid())
 userId    String
 guildId   String?
 message   String
 createdAt DateTime @default(now()) @map(name: "created_at")

 @@map(name: "suggestions")
}

// Categories for slash commands
model CommandCategories {
 name                    String                    @id
 commands                Commands[]
 guildDisabledCategories GuildDisabledCategories[]
}

// Slash commands
model Commands {
 name                  String                  @id
 description           String
 options               Json[]                  @default([])
 categoryName          String                  @map(name: "category_name")
 category              CommandCategories       @relation(fields: [categoryName], references: [name], onDelete: Cascade)
 guildDisabledCommands GuildDisabledCommands[]

 @@map(name: "commands")
}

// Discord guilds
model Guild {
 id          String   @id @default(cuid())
 guildId     String   @unique @map(name: "guild_id")
 lastUpdated DateTime @default(now()) @updatedAt @map(name: "last_updated")
 createdAt   DateTime @default(now()) @map(name: "created_at")

 // XP Module
 enableXP                          Boolean  @default(true) @map(name: "enable_xp")
 enableXPLastChanged               DateTime @default(now()) @map(name: "enable_xp_last_changed")
 enableXPLevelUpMessage            Boolean  @default(true) @map(name: "sent_level_messages")
 enableXPLevelUpMessageLastChanged DateTime @default(now()) @map(name: "sent_level_messages_last_changed")

 // Guild customizations
 embedColor String  @default("#5865F2") @map(name: "embed_color")
 publicPage Boolean @default(false) @map(name: "public_page")
 vanity     String? @unique

 // Guild modules
 guildLogs               GuildLogs[]
 guildLogsSettings       GuildLogsSettings[]
 guildXp                 GuildXp[]
 guildJoin               GuildJoin[]
 guildLeave              GuildLeave[]
 reputation              Reputation[]
 giveaway                Giveaways[]
 guildMessage            GuildMessage[]
 guildDisabledCommands   GuildDisabledCommands[]
 guildDisabledCategories GuildDisabledCategories[]
 autoMod                 AutoMod[]
 guildWarns              GuildWarns[]
 guildWelcomeMessage     GuildWelcomeMessage?
 guildLeaveMessage       GuildLeaveMessage?

 @@map(name: "guilds")
}

// Guild disabled slash commands
model GuildDisabledCommands {
 id          String   @id @default(cuid())
 guildId     String   @map(name: "guild_id")
 commandName String   @map(name: "command_id")
 command     Commands @relation(fields: [commandName], references: [name], onDelete: Cascade)
 createdAt   DateTime @default(now()) @map(name: "created_at")
 guild       Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

 @@map(name: "guild_disabled_commands")
}

// Guild disabled slash commands categories 
model GuildDisabledCategories {
 id           String            @id @default(cuid())
 guildId      String            @map(name: "guild_id")
 categoryName String            @map(name: "category_name")
 category     CommandCategories @relation(fields: [categoryName], references: [name], onDelete: Cascade)
 createdAt    DateTime          @default(now()) @map(name: "created_at")
 guild        Guild             @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

 @@map(name: "guild_disabled_categories")
}

// Guild security/audit logs
enum GuildLogType {
 // Discord events
 InviteCreate // Done
 InviteDelete // Done

 MessageCreate // Exclude
 MessageBulkDelete // Done
 MessageDelete // Done
 MessageUpdate // Done

 ThreadCreate
 ThreadDelete
 ThreadMembersUpdate
 ThreadMemberUpdate
 ThreadUpdate

 GuildUpdate // Done
 GuildMemberUpdate
 GuildMemberAdd // Exclude
 GuildMemberRemove // Exclude
 GuildIntegrationsUpdate

 GuildRoleCreate // Done
 GuildRoleDelete // Done
 GuildRoleUpdate // Done

 GuildScheduledEventCreate
 GuildScheduledEventDelete
 GuildScheduledEventUpdate
 GuildScheduledEventUserAdd
 GuildScheduledEventUserRemove

 GuildStickerCreate // Done
 GuildStickerDelete // Done
 GuildStickerUpdate // Done

 GuildEmojiCreate // Done
 GuildEmojiDelete // Done
 GuildEmojiUpdate // Done

 GuildBanAdd // Done
 GuildBanRemove // Done

 ChannelCreate // Done
 ChannelDelete // Done
 ChannelPinsUpdate // Done
 ChannelUpdate // Done

 AutoModerationActionExecution
 AutoModerationRuleCreate
 AutoModerationRuleDelete
 AutoModerationRuleUpdate

 // Custom
 PublicDashboardUpdate
 VanityUpdate
 EmbedColorUpdate
 CommandCategoryEnable
 CommandCategoryDisable
 CommandEnable
 CommandDisable

 LogUpdate

 GiveawayCreate
 GiveawayDelete
 GiveawayEdit
 GiveawayPaused
 GiveawayResumed
 GiveawayEnded

 WelcomeMessageEnable
 WelcomeMessageDisable

 LeaveMessageEnable
 LeaveMessageDisable

 ReputationUpdate

 WarnCreate
 WarnDelete
 WarnUpdate

 Unknown
}

// Guild audit logs settings
model GuildLogsSettings {
 id        String       @id @default(cuid())
 guildId   String       @map(name: "guild_id")
 type      GuildLogType @default(Unknown)
 enabled   Boolean      @default(false)
 channelId String?      @map(name: "channel_id")
 createdAt DateTime     @default(now()) @map(name: "created_at")
 guild     Guild        @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

 @@unique([guildId, type])
 @@map(name: "guild_logs_settings")
}

// Guild audit logs
model GuildLogs {
 id        String       @id @default(cuid())
 guildId   String       @map(name: "guild_id")
 authorId  String       @map(name: "author_id")
 content   String
 data      Json         @default("{}")
 type      GuildLogType @default(Unknown)
 createdAt DateTime     @default(now()) @map(name: "created_at")
 guild     Guild        @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
 user      User         @relation(fields: [authorId], references: [discordId], onDelete: Cascade)

 @@map(name: "guild_logs")
}

// Guild members xp
model GuildXp {
 id        String   @id @default(cuid())
 guildId   String   @map(name: "guild_id")
 userId    String   @map(name: "user_id")
 xp        Int      @default(0)
 createdAt DateTime @default(now()) @map(name: "created_at")
 guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
 user      User     @relation(fields: [userId], references: [discordId], onDelete: Cascade)

 @@map(name: "guild_xp")
}

// Guild members reputation
model Reputation {
 id         String   @id @default(cuid())
 guildId    String   @map(name: "guild_id")
 userId     String   @map(name: "user_id")
 reputation Int      @default(0)
 createdAt  DateTime @default(now()) @map(name: "created_at")
 guild      Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
 user       User     @relation(fields: [userId], references: [discordId], onDelete: Cascade)

 @@map(name: "reputation")
}

// Guild members joined
model GuildJoin {
 id      String   @id @default(cuid())
 guildId String   @map(name: "guild_id")
 date    DateTime @default(now())
 joins   Int      @default(0)
 guild   Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

 @@map(name: "guild_joins")
}

// Guild members leaves count
model GuildLeave {
 id      String   @id @default(cuid())
 guildId String   @map(name: "guild_id")
 date    DateTime @default(now())
 leaves  Int      @default(0)
 guild   Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

 @@map(name: "guild_leaves")
}

// Guild messages count
model GuildMessage {
 id       String   @id @default(cuid())
 guildId  String   @map(name: "guild_id")
 date     DateTime @default(now())
 messages Int      @default(0)
 guild    Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

// Guild giveaways
model Giveaways {
 id        Int      @id @default(autoincrement())
 guildId   String   @map(name: "guild_id")
 messageId String   @unique @map(name: "message_id")
 data      Json
 createdAt DateTime @default(now()) @map(name: "created_at")
 guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

// Guild automod rules
model AutoMod {
 id        String   @id @default(cuid())
 guildId   String   @map(name: "guild_id")
 ruleId    String   @unique @map(name: "rule_id")
 ruleType  String   @map(name: "rule_type")
 createdAt DateTime @default(now()) @map(name: "created_at")
 guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

 @@map(name: "auto_mod")
}

model GuildWarns {
 id          String   @id @default(cuid())
 warnId      Int      @map(name: "warn_id")
 guildId     String   @map(name: "guild_id")
 userId      String   @map(name: "user_id")
 createdById String   @default("0") @map(name: "created_by_id")
 message     String
 createdAt   DateTime @default(now()) @map(name: "created_at")
 guild       Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
 user        User     @relation(fields: [userId], references: [discordId], onDelete: Cascade)

 @@map(name: "guild_warns")
}

// Guild welcome message
model GuildWelcomeMessage {
 id          String   @id @default(cuid())
 guildId     String   @unique @map(name: "guild_id")
 channelId   String   @map(name: "channel_id")
 title       String   @default("🎉 Welcome to the server {user}!")
 description String   @default("> Welcome to **{guild}** We hope you enjoy your stay here!")
 embedColor  String   @default("#5865F2") @map(name: "embed_color")
 enabled     Boolean  @default(false)
 createdAt   DateTime @default(now()) @map(name: "created_at")
 guild       Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

 @@map(name: "guild_welcome_message")
}

// Guild leave message
model GuildLeaveMessage {
 id          String   @id @default(cuid())
 guildId     String   @unique @map(name: "guild_id")
 channelId   String   @map(name: "channel_id")
 title       String   @default("👋 Goodbye {user}!")
 description String   @default("> We're sorry to see you go!")
 embedColor  String   @default("#5865F2") @map(name: "embed_color")
 enabled     Boolean  @default(false)
 createdAt   DateTime @default(now()) @map(name: "created_at")
 guild       Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

 @@map(name: "guild_leave_message")
}
