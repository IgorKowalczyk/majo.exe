services:
 # Database
 db:
  image: postgres:latest
  container_name: majoexe-db
  restart: unless-stopped
  user: postgres
  environment:
   - POSTGRES_DB=majoexe
   - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
  volumes:
   - database:/var/lib/postgresql/data
  ports:
   - "5432:5432"
  networks:
   - app_network
  healthcheck:
   test: ["CMD", "pg_isready"]
   interval: 10s
   timeout: 5s
   retries: 5

 # Database cache
 redis:
  image: redis:latest
  container_name: majoexe-cache
  restart: unless-stopped
  environment:
   - REDIS_PASSWORD=${REDIS_PASSWORD}
  ports:
   - "6379:6379"
  networks:
   - app_network
  volumes:
   - cache:/data
  depends_on:
   db:
    condition: service_healthy
  healthcheck:
   test: ["CMD", "redis-cli", "ping"]
   interval: 10s
   timeout: 5s
   retries: 5

 # Discord Bot
 bot:
  build:
   context: .
   dockerfile: ./apps/bot/Dockerfile
  container_name: majoexe-bot
  restart: unless-stopped
  environment:
   - TOKEN=${TOKEN}
   - CLIENT_ID=${CLIENT_ID}

   - DATABASE_URL=postgres://postgres:${DATABASE_PASSWORD}@db:5432/majoexe
   - DATABASE_URL_UNPOOLED=postgres://postgres:${DATABASE_PASSWORD}@db:5432/majoexe

   - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379

   - TOPGG_API_KEY=${TOPGG_API_KEY}
   - DISCORD_BOT_LIST_API_KEY=${DISCORD_BOT_LIST_API_KEY}
  depends_on:
   db:
    condition: service_healthy
   redis:
    condition: service_healthy
  networks:
   - app_network

networks:
 app_network:
  driver: bridge

volumes:
 database:
  driver: local
 cache:
  driver: local
